{
  "version": 3,
  "sources": ["../src/index.ts", "../src/runtimeHelpers.ts", "../src/ast.ts", "../src/parse.ts", "../src/transforms/transformElement.ts", "../src/transforms/transformExpression.ts", "../../shared/src/index.ts", "../src/transforms/transformText.ts", "../src/transform.ts"],
  "sourcesContent": ["import { parse } from \"./parse\";\nimport { transform } from \"./transform\";\n\n\nexport function compile(template) {\n  const ast = parse(template);//\u8FD9\u91CC\u9700\u8981\u5C06html\u8BED\u6CD5\u8F6C\u6362\u6210javascript\u8BED\u6CD5\n  console.log(ast);\n  //\u5BF9ast\u8BED\u6CD5\u4E66\u5C3D\u5FC3\u4E00\u4E9B\u9884\u5148\u5904\u7406\n\n   transform(ast);\n\n   return ast;\n\n  //return generate(ast);\n\n}\n\n\n\n\n", "export const TO_DISPLAY_STRING  = Symbol('toDisplayString')\nexport const CREATE_TEXT = Symbol('createTextVNode')\nexport const helperMap = {\n    [TO_DISPLAY_STRING]:'tiDsiplayString',\n    [CREATE_TEXT] :'createTextVNode'\n}", "import { CREATE_TEXT } from \"./runtimeHelpers\";\n\nexport const enum NodeTypes {\nROOT,//\u8DDF\u8282\u70B9\nELEMENT,//\u5143\u7D20\nTEXT,//\u6587\u672C\nCOMMENT,//\u6CE8\u91CA\nSIMPLE_EXPRESSION,//\u7B80\u5355\u8868\u8FBE\nINTERPOLATION,//\u6A21\u7248\u8868\u8FBE\u5F0F\nATTRIBUTE,\nDIRECTIVE,\n//containers\nCOMPOUND_EXPRESSION,//\u590D\u5408\u8868\u8FBE\u5F0F\nIF,\nIf_BRANCH,\nFOR,\nTEXT_CALL,//\u6587\u672C\u8C03\u7528 \n//codegen\nVNODE_CALL,//\u5143\u7D20\u8C03\u7528\nJS_CALL_EXPRESS,//js\u8C03\u7528\u8868\u8FBE\u5F0F\n}\nexport function createCallExpression(context,args){\n   let callee =  context.helper(CREATE_TEXT);\n   return {\n    callee, \n    type:NodeTypes.JS_CALL_EXPRESS,\n    arguments:args,\n   }\n}", "import { NodeTypes } from \"./ast\";\n\nfunction createParserContext(template: any) {\n  return {\n    line: 1,\n    column: 1,\n    offset: 0,\n    source: template,//\u6B64\u5B57\u6BB5\u4F1A\u88AB\u4E0D\u505C\u7684\u8FDB\u884C\u89E3\u6790\uFF0C\u4E5F\u5C31\u662F\u88AB\u6D88\u8D39\uFF0C\u5177\u4F53\u7528slice\u65B9\u6CD5\n    originalSource: template,\n  }\n}\n\n\nfunction isEnd(context) {\n  const source = context.source;\nif(context.source.startsWith('</')){\n  \n  return true;\n}\n\n  return !source;//\u89E3\u6790\u5230\u6700\u540E\u4E00\u4E2A\u5B57\u7B26\u4E32\n}\nfunction getCursor(context) {\n  let { line, column, offset } = context;\n  return { line, column, offset };\n}\n\nfunction advancePositionWithMutation(context, source, endIndex) {\n  let lineCount = 0;\n  let linePos = -1;\n  for (let i = 0; i < endIndex; i++) {\n    if (source.charCodeAt(i) == 10) {//\u6362\u884C\u7B26\n      lineCount++;\n      linePos = i;\n    }\n  }\n  context.line += lineCount; \n  context.offset += endIndex;\n  context.column = linePos ==-1?context.column+endIndex:endIndex - linePos\n}\nfunction advanceBy(context, endIndex) {\n  let source = context.source;\n  //\u6BCF\u6B21\u5220\u9664\u5185\u5BB9\u7684\u65F6\u5019\uFF0C\u90FD\u8981\u66F4\u65B0\u6700\u65B0\u7684\u884C\u5217\u53F7\u548C\u504F\u79FB\u91CF\u4FE1\u606F\n  advancePositionWithMutation(context, source, endIndex);\n\n  context.source = source.slice(endIndex);\n  console.log(context.source)\n}\n\nfunction parseTextData(context, endIndex) {\n  const rawText = context.source.slice(0, endIndex);\n  //\u4E0B\u9762\u51FD\u6570\u5B9E\u73B0\u6D88\u8D39\n  advanceBy(context, endIndex)\n  return rawText;\n}\nfunction getSelection(context,start,end?){\n  end = end || getCursor(context);\n  return {\n    start,\n    end,\n    source:context.originalSource.slice(start.offset,end.offset),\n  }\n}\n\nfunction parseText(context) {\n  //\u5728\u89E3\u6790\u6587\u672C\u7684\u65F6\u5019\uFF0C\u8981\u770B \u540E\u9762\u5230\u54EA\u91CC\u7ED3\u675F\n  let endTokens = ['<', '{{'];\n  let endIndex = context.source.length;//\u9ED8\u8BA4\u8BA4\u4E3A\u5230\u6700\u540E\u7ED3\u675F\n\n  for (let i = 0; i < endTokens.length; i++) {\n    let index = context.source.indexOf(endTokens[i], 1);\n    //\u627E\u5230\u4E86\uFF0C\u5E76\u4E14\u7B2C\u4E00\u6B21\u6BD4\u6574\u4E2A\u5B57\u7B26\u4E32\u5C0F\n    if (index !== -1 && endIndex > index) {\n      endIndex = index;\n    }\n  }\n  //\u521B\u5EFA\u884C\u5217\u4FE1\u606F\u3001\n   const start=  getCursor(context)//\u5F00\u59CB\n  //\u53D6\u5185\u5BB9\n  const content = parseTextData(context, endIndex);\n  return {\n    type:NodeTypes.TEXT,\n    content:content,\n    loc:getSelection(context,start),\n  }\n}\nfunction parseInterpolation(context){//\u5904\u7406\u8868\u8FBE\u5F0F\u7684\u4FE1\u606F\n  const start = getCursor(context);\n  const closeIndex = context.source.indexOf('}}',2)//\u67E5\u627E\u7ED3\u675F\u7684\u5927\u62EC\u53F7\n  advanceBy(context,2);\n  const innerStart = getCursor(context);\n  const innerEnd = getCursor(context);\n  //\u62FF\u5230\u539F\u59CB\u7684\u5185\u5BB9\n  const rawContentLength = closeIndex -2;//\u6B64\u65F6\u5DE6\u8FB9\u4E24\u4E2A\u5927\u62EC\u53F7\u5DF2\u7ECF\u88AB\u6D88\u8D39\uFF0C\u5728\u83B7\u53D6\u53F3\u8FB9\u62EC\u53F7\u7684\u7D22\u5F15\u5C31\u5F97\u5230\u8868\u8FBE\u5F0F\u91CC\u9762\u4EE3\u7801\u5B57\u7B26\u7684\u957F\u5EA6\n  let  preContent  =parseTextData(context,rawContentLength);//\u8FD4\u56DE\u6587\u672C\u5185\u5BB9\uFF0C\u5B9E\u9645\u662F\u65B9\u6CD5\u590D\u7528\uFF0C\u4F46\u662F\u8FD9\u91CC\u7684\u6587\u672C\u4EE3\u8868\u7684\u662F\u4EE3\u7801 \n  let content = preContent.trim();\n  let startOffset =  preContent.indexOf(content);//{{   CXXXX}}\n\n  if(startOffset>0){\n    advancePositionWithMutation(innerStart,preContent,startOffset)\n  }\n\n  let endOffset = startOffset + content.length;\n  advancePositionWithMutation(innerEnd,preContent,endOffset);//\u8DDF\u65B0innerEnd\u7684\u884C\u5217\u4FE1\u606F\n   advanceBy(context,2)//\u6B64\u65F6\u91CC\u9762\u7684\u4EE3\u7801\u8868\u8FBE\u5F0F\u4FE1\u606F\u5DF2\u7ECF\u83B7\u53D6 \u9700\u8981\u6D88\u8D39\u53F3\u8FB9\u4E24\u4E2A\u5927\u62EC\u53F7\n   return{\n    type:NodeTypes.INTERPOLATION,//\u8868\u8FBE\u5F0F\n    content:{\n      type:NodeTypes.SIMPLE_EXPRESSION,\n      content,\n      loc:getSelection(context,innerStart,innerEnd)\n    },\n    loc:getSelection(context,start),\n    children:[],\n   }\n}\n\nfunction advanceByspaces(context){\n  let match = /^[ \\t\\r\\n]+/.exec(context.source);//\u8FD9\u4E2A\u6B63\u5219\u5E72\u5565\u7528\u7684\uFF1F\u5339\u914D\u6B63\u5219\u7684\uFF1F\n  if(match){\n    advanceBy(context,match[0].length);//\u6D88\u8D39\u7A7A\u683C\uFF1B\n  }\n}\n\nfunction parseAttributeValue(context){\n const start = getCursor(context);\n let quote = context.source[0];\n let content;\n if(quote=='\"' ||quote===\"'\"){\n  advanceBy(context,1);\n  const endIndex = context.source.indexOf(quote);\n     content = parseTextData(context,endIndex);//\u8FD9\u4E2A\u65B9\u6CD5\u7ECF\u5E38\u670D\u7528\n    //\u7B80\u5355\u8BF4\u4E00\u4E0B\u5427\uFF0C\u5C31\u662F\u7ED9\u4F60\u4E00\u4E2A\u4E0A\u4E0B\u6587\uFF0C\u5E76\u4E14\u7ED9\u4F60\u4E00\u4E2A\u7ED3\u675F\u7D22\u5F15\u6587\u5B57\uFF0C\u4F60\u7ED9\u6211\u628A\u5230\u8FD9\u4E2A\u7ED3\n    //\u7ED3\u675F\u7D22\u5F15\u90E8\u5206\u7684\u503C\u7ED9\u6D88\u8D39\u6389\uFF0C\u5E76\u4E14\u4EE5\u5B57\u7B26\u7684\u5F62\u5F0F\u8FD4\u56DE\u8FD9\u4E2A\u5185\u5BB9\u56DE\u6765\uFF0C\n    advanceBy(context,1)//\u6D88\u8D39\u53F3\u8FB9\u7684\u5F15\u53F7\n }\n return {\n  content,\n  loc:getSelection(context,start),\n }\n\n\n}\n\nfunction parseAttribute(context){\nconst start  = getCursor(context);\nconst match = /^[^\\t\\r\\n\\f />][^\\t\\r\\n\\f />=]*/.exec(context.source);\n let name = match[0];\n advanceBy(context,name.length);//\u6D88\u8D39\u5C5E\u6027\u540D\n\n advanceByspaces(context);//\u6D88\u8D39\u51FA\u73B0\u7684\u7A7A\u683C\n\n advanceBy(context,1);//\u6D88\u8D39\u7B49\u53F7\n //\u6211\u53EA\u5904\u7406\u5355\u53CC\u5F15\u53F7\u5305\u88F9\u7684\u503C\n let value = parseAttributeValue(context);\n\nreturn {\n  type:NodeTypes.ATTRIBUTE,\n  name,\n  value:{\n    type:NodeTypes.TEXT,\n    ...value\n  },\n  loc:getSelection(context,start),\n}\n\n}\n\n function parseAttributes(context){// a-1 b-2>\nconst props = [];\n  while(context.source.length>0 && !context.source.startsWith('>')){\n    //\u5728\u6E90\u7801\u91CC\u9762\n    const prop = parseAttribute(context);\n    props.push(prop);\n    advanceByspaces(context);\n  }\n\n\nreturn props;\n }\n\nfunction parseTag(context){\n  \n  const start = getCursor(context);\n  const match = /^<\\/?([a-z][^ \\t\\r\\n/>]*)/.exec(context.source)\n  const tag = match[1];\n  advanceBy(context,match[0].length);//\u5220\u9664\u6574\u4E2A\u6807\u7B7E\n  advanceByspaces(context);\n\n\n   let props =  parseAttributes(context);\n  let isSelfCloseing = context.source.startsWith('/>');//\u81EA\u95ED\u5408\u6807\u7B7E\uFF1F\n  advanceBy(context,isSelfCloseing?2:1);\n  return{\n    type:NodeTypes.ELEMENT,\n    tag:tag,\n    isSelfCloseing,\n    loc:getSelection(context,start),\n    children:[],\n    props,\n  }\n}\n\nfunction parseelement(context){\n//\u89E3\u6790\u6807\u7B7E\uFF0C\u8FD9\u91CC\u9762\u662F\u6BD4\u8F83\u590D\u6742\u7684\uFF0C\u56E0\u4E3A\u4F1A\u6D89\u53CA\u9012\u5F52\u5D4C\u5957\u7B49\u7B49\n// <div> <br/>  </div>  \n let ele =   parseTag(context);\n//\u8FD9\u91CC\u9700\u8981\u63D2\u5165\u5904\u7406\u513F\u5B50\u7684\u903B\u8F91\u4E86\u4E5F\u662F\u6A21\u7248\u6E32\u67D3\u91CC\u9762\u6700\u4E3A\u590D\u6742\u7684\u90E8\u5206\u4E86\uFF1B\nlet children = parseChildren(context);//\u5904\u7406\u513F\u5B50\u7684\u65F6\u5019\u53EF\u80FD\u6CA1\u6709\u513F\u5B50\uFF1B\n\n if(context.source.startsWith('</')){\n  //\u5904\u7406\u7ED3\u675F\u6807\u7B7E\uFF0C\u8FD9\u91CC\u5904\u7406\u7684\u5F88\u7B80\u964B\u554A\uFF0C \u4E0D\u8003\u8651\u7684\u91CC\u9762\u5D4C\u5957\u5143\u7D20\u4EE5\u53CA\u4E0D\u8003\u8651\u91CC\u9762\u6709\u7A7A\u683C\u6216\u8005\u6587\u5B57\u5565\u7684\n  parseTag(context);//\u8FD9\u91CC\u4E0D\u9700\u8981\u8FD4\u56DE\u503C\u54E6\uFF0C\u76F4\u63A5\u7ED9\u4F60\u5E72\u6389\u4E86\n }\n //\u66F4\u65B0\u884C\u5217\u4FE1\u606F\n ele.loc = getSelection(context,ele.loc.start);\n ele.children = children;\n return ele;\n}\n//\u4E0B\u9762\u662F\u4E00\u4E2A\u9012\u5F52\u65B9\u6CD5\n  function parseChildren(context){\n  const nodes = [];\n  while (!isEnd(context)) {\n    const { source } = context;\n    let node;\n    if (source.startsWith('{{')) {\n      node = parseInterpolation(context);\n    } else if (source[0] === '<') {//\u6807\u7B7E\n      node = parseelement(context);\n    }//\u6587\u672C\n    if (!node) {\n      node = parseText(context);\n        console.log(node)\n\n    }\n    nodes.push(node);\n\n  }\n  nodes.forEach((node,i)=>{\n    if(node.type === NodeTypes.TEXT){\n     if(!/[^t\\r\\n\\f ] /.test(node.content)){\n      nodes[i] = null;\n     }; \n    }\n  })\n  \n  return nodes.filter(Boolean);\n }\n\n export  function parse(template) {\n  //\u521B\u5EFA\u4E00\u4E2A\u89E3\u6790\u7684\u4E0A\u4E0B\u6587\uFF0C\u6765\u8FDB\u884C\u5904\u7406 \n  const context = createParserContext(template);\n  // < \u5143\u7D20\n  // {{}}\u8BF4\u660E\u8868\u8FBE\u5F0F\n  //\u5176\u4ED6\u5C31\u662F\u6587\u672C\n\n  const start = getCursor(context)\n\n   let root = createRoot(parseChildren(context),getSelection(context,start))\n   \nreturn root\n}\nfunction createRoot(nodes,loc){\n   return {\n    type:NodeTypes.ROOT,//\u540E\u7EED\u8F6C\u6362\u6210vnode\u7684\u65F6\u5019\u5C31\u662Ffragment\n    children:nodes,\n    loc,\n   }\n}\n", "import { NodeTypes } from \"../ast\";\n\nexport function transformElment(node, contexts) {\n    if (NodeTypes.ELEMENT === node.type) {\n        return () => {\n     \n\n        }\n    }\n\n\n}", "import { NodeTypes } from \"../ast\";\n\n export function transformExpression(node,contexts) {\n//\u662F\u4E0D\u662F\u8868\u8FBE\u5F0F\nif(node.type === NodeTypes.INTERPOLATION){\n    let content = node.content.content;\n    node.content.content = `_ctx.${content}`\n}\n}", "export const isObject = (value) => {\n    return typeof value === 'object' && value !== null\n}\nexport const isFunction = (value) => {\n    return typeof value === 'function';\n};\n\nexport const isString = (value) => {\n    return typeof value === 'string';\n}\nexport const isNumber = (value) => {\n    return typeof value === 'number';\n}\nconst hasOwnProperty = Object.prototype.hasOwnProperty;\n  export const hasOwn = (value,key)=>hasOwnProperty.call(value,key);\n\n\nexport const isArray = Array.isArray;\nexport const assign = Object.assign;\n\nexport const invokeArrayFns=(fns)=>{\n    for(let i =0;i<fns.length;i++){\n        fns[i]();//\u5947\u89C2\uFF0C\u5168\u90FD\u6267\u884C\uFF1F\n    }\n}\n\nexport const enum ShapeFlags {\n    ELEMENT = 1,\n    FUNCTIONAL_COMPONENT = 1<<1,\n    STATEFUL_COMPONENT = 1<<2,\n    TEXT_CHILDREN = 1<<3,\n    ARRAY_CHILDREN = 1<<4,\n    SLOTS_CHILDREN = 1<<5,\n    TELEPORT = 1<<6,\n\n    SUSPENSE = 1<<7,\n    COMPONENT_SHOULD_KEEP_ALIVE = 1<<8,\n    CONMONENT_KEPT_ALIVE = 1<<9,\n    COMPONEBT = ShapeFlags.STATEFUL_COMPONENT |ShapeFlags.FUNCTIONAL_COMPONENT\n}\n\nexport const enum PatchFlags {\n    TEXT=1,//\u52A8\u6001\u6587\u672C\u8282\u70B9\n    CLASS=1<<1,//\u52A8\u6001class\n    STYLE = 1<<2,//\u52A8\u6001style\u3002\n    PROPS = 1<<3,//\u9664\u4E86class/style\u7684\u52A8\u6001\u5C5E\u6027\n    FULL_PROPS= 1<<4,//\u6709key\u9700\u8981\u5B8C\u6574\u7684diff\n    HYDRATE_EVENTs  =1<<5,//\u6302\u8F7D\u8FC7\u4E8B\u4EF6\u7684\n    STABLE_FRAGMENT = 1<<6,//\u7A33\u5B9A\u5E8F\u5217\uFF0C\u81EA\u8282\u70B9\u987A\u5E8F\u4E0D\u4F1A\u53D1\u751F\u6539\u53D8\n    KEYED_FRAGMENT = 1<<7,//\u5B50\u8282\u70B9\u6709key\u7684fragment\n    UNKEYED_FRAGMENY = 1<<8,//\u5B50\u8282\u70B9\u6CA1\u6709key\u7684fragment\n    NEED_PATCH = 1<<9,//\u8FDB\u884C\u7ED9props\u6BD4\u8F83\uFF0Cref\u6BD4\u8F83\n    DYNAMIC_SLOTS = 1<<10,//\u52A8\u6001\u63D2\u69FD\n    DEV_ROOT_FRAGMENT = 1<< 11,\n    HOISTED = -1,//\u8868\u793A\u9759\u6001\u8282\u70B9\uFF0C\u5185\u5BB9\u53D8\u5316 \u4E0D\u6BD4\u8F83\u513F\u5B50\n    BAIL= -2,//\u8868\u793Adiff\u7B97\u6CD5\u5E94\u8BE5\u7ED3\u675F\n}", "import { PatchFlags } from \"@vue/shared\";\nimport { createCallExpression, NodeTypes } from \"../ast\";\nexport function isText(node) {\n\n    return node.type === NodeTypes.INTERPOLATION || node.type === NodeTypes.TEXT\n\n}\nexport function transformTxet(node, context) {//\u6211\u5E0C\u671B\u5C06\u591A\u4E2A\u5B50\u8282\u70B9\u62FC\u5728\u4E00\u8D77\n    if (node.type === NodeTypes.ELEMENT || node.type === NodeTypes.ROOT) {\n        return () => {\n            console.log('children', node.children);\n            let currentContainer = null;\n            let children = node.children;\n            let hasText = false;\n            for (let i = 0; i < children.length; i++) {\n                let child = children[i];//\u62FF\u5230\u7B2C\u4E00\u4E2A\u5B69\u5B50\n                hasText = true;\n                if (isText(child)) {\n                    //\u770B\u4E0B\u4E00\u4E2A\u8282\u70B9\u662F\u4E0D\u662F\u6587\u672C\n                    for (let j = i + 1; j < children.length; j++) {\n                        let next = children[j];\n                        if (isText(next)) {\n                            if (!currentContainer) {\n                                currentContainer = children[i] = {\n                                    type: NodeTypes.COMPOUND_EXPRESSION,\n                                    children: [child]\n                                }\n                            }\n                            currentContainer.children.push('+', next);\n                            children.splice(j, 1);\n                        } else {\n                            currentContainer = null;\n                            break;\n                        }\n                    }\n                }\n            }\n            if (!hasText || children.length === 1) {\n                return;\n            }\n            //\u9700\u8981\u7ED9\u591A\u4E2A\u513F\u5B50\u4E2D\u7684\u521B\u5EFA\u6587\u672C\u8282\u70B9\u6DFB\u52A0patch Flag\n            for (let i = 0; i < children.length; i++) {\n                const child = children[i];\n                const callArgs = [];\n                //\n                if (isText(child) || child.type == NodeTypes.COMPOUND_EXPRESSION) {\n                    //\u90FD\u662F\u6587\u672C\n                    callArgs.push(child);\n                    if (node.type !== NodeTypes.TEXT) {\n                        //\u52A8\u6001\u8282\u70B9\n                        callArgs.push(PatchFlags.TEXT);\n                    }\n                    children[i] = {\n                        type:NodeTypes.TEXT_CALL,\n                        content:child,\n                        condegenNode:createCallExpression(context,''),\n                    }\n                }\n            \n            }\n        }\n    }\n\n\n}", "import { NodeTypes } from \"./ast\";\nimport { TO_DISPLAY_STRING } from \"./runtimeHelpers\";\nimport { transformElment } from \"./transforms/transformElement\";\nimport { transformExpression } from \"./transforms/transformExpression\";\nimport { transformTxet } from \"./transforms/transformText\";\n\n\n\n\nfunction createTransformContext(root) {\n  const context = {\n    currentNode: root,//\u5F53\u524D\u6B63\u5728\u8F6C\u5316\u7684\u662F\u8C01\n    parent: null,//\u5F53\u524D\u8F6C\u5316\u7684\u7236\u8282\u70B9\u662F\u8C01\n    helpers: new Map(),//\u4F18\u5316\uFF0C\u8D85\u8FC720\u4E2A\u76F8\u540C\u8282\u70B9\u4F1A\u88AB\u5B57\u7B26\u4E32\u5316\n    helper(name) {//\u6839\u636E\u4F7F\u7528\u8FC7\u7684\u65B9\u6CD5\u8FDB\u884C\u4F18\u5316\n      const count = context.helpers.get(name) || 0;\n      context.helpers.set(name, count + 1);\n      return name;\n    },\n    nodeTransforms: [//\u90FD\u4F1A\u8C03\u7528\uFF0C\u4F46\u662F\u6BCF\u4E2A\u65B9\u6CD5\u81EA\u5DF1\u8981\u5224\u65AD\n      transformElment,\n      transformTxet,\n      transformExpression,\n\n    ]\n  }\n  return context;\n}\n\nfunction traverse(node, context) {\n  context.currentNode = node;\n  const transforms = context.nodeTransforms;\n  const exitsFns = [];\n  for(let i =0;i<transforms.length;i++){\n    let onExit =  transforms[i](node,context);//\u5728\u6267\u884C\u7684\u65F6\u5019\u53C8\u53EF\u80FD\u8FD9\u4E2Anode\u88AB\u5220\u9664\u4E86\uFF1F\nif(onExit){\n    exitsFns.push(onExit);\n\n}\n    if(!context.currentNode) return;//\u5982\u679C\u5F53\u524D\u8282\u70B9\u88AB\u5220\u6389\u4E86\uFF0C\u90A3\u4E48\u5C31\u4E0D\u8003\u8651\u5F53\u524D\u8282\u70B9\u4E86\n  }\n  switch(node.type){\n    case NodeTypes.INTERPOLATION:\n        //\u5B8F \u5E38\u91CF\n        context.helper(TO_DISPLAY_STRING)\n    case NodeTypes.ELEMENT:\n    case NodeTypes.ROOT:\n        \n      for(let i=0;i<node.children.length;i++){\n        context.parent = node;\n        traverse(node.children[i],context)\n      }\n  }\n  context.currentNode = node ;//\u5F53\u6267\u884C\u9000\u51FA\u51FD\u6570\u7684 \u65F6\u5019\uFF0C\u590D\u539F\n  //\u8FD9\u91CC\u7684\u9000\u51FA\u51FD\u6570\u7684\u4F5C\u7528\u4E0D\u662F\u5F88\u6E05\u695A\u554A\n  let i = exitsFns.length;\n  while(i--){\n    exitsFns[i]();\n  }\n\n}\n  \n export function transform(ast) {\n  //\u5BF9\u6811\u8FDB\u884C\u904D\u5386\u64CD\u4F5C\u3001\n  const context = createTransformContext(ast);\n  traverse(ast, context);\n}"],
  "mappings": "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",
  "names": ["i"]
}
